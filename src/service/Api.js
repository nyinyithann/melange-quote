// Generated by Melange

import * as Curry from "melange/lib/es6/curry.mjs";
import * as Fetch from "bs-fetch/./src/Fetch.js";
import * as QuoteModel from "../model/QuoteModel.js";
import * as Caml_option from "melange/lib/es6/caml_option.mjs";

function handleResponse(promise) {
  return promise.then(function (response) {
              if (response.ok) {
                return Promise.resolve({
                            TAG: /* Ok */0,
                            _0: response.json()
                          });
              }
              debugger;
              return Promise.resolve({
                          TAG: /* Error */1,
                          _0: response.statusText
                        });
            });
}

function handleFault(promise) {
  return promise.catch(function (param) {
              return Promise.resolve({
                          TAG: /* Error */1,
                          _0: "unexpected promise fault"
                        });
            });
}

function handleResult(callback, promise) {
  return promise.then(function (result) {
              if (result.TAG === /* Ok */0) {
                return result._0.then(function (data) {
                            Curry._1(callback, {
                                  TAG: /* Ok */0,
                                  _0: data
                                });
                            return Promise.resolve(undefined);
                          });
              }
              Curry._1(callback, {
                    TAG: /* Error */1,
                    _0: result._0
                  });
              return Promise.resolve(undefined);
            });
}

function getQuotes(apiPath, callback, signal, param) {
  var requestInit = Curry._2(Fetch.RequestInit.make(/* Get */0, {
              "Content-Type": "application/json"
            }, undefined, undefined, undefined, undefined)(undefined, undefined, undefined, undefined, undefined), Caml_option.some(signal), undefined);
  var promise = handleResponse(fetch(apiPath, requestInit));
  handleResult(callback, promise.catch(function (param) {
            return Promise.resolve({
                        TAG: /* Error */1,
                        _0: "unexpected promise fault"
                      });
          }));
}

function postQuote(apiPath, quote, callback, signal, param) {
  var requestInit = Curry._2(Fetch.RequestInit.make(/* Post */2, {
              "Content-Type": "application/json"
            }, Caml_option.some(JSON.stringify(QuoteModel.Encode.encode(quote))), undefined, undefined, undefined)(undefined, undefined, undefined, undefined, undefined), Caml_option.some(signal), undefined);
  var promise = handleResponse(fetch(apiPath, requestInit));
  handleResult(callback, promise.catch(function (param) {
            return Promise.resolve({
                        TAG: /* Error */1,
                        _0: "unexpected promise fault"
                      });
          }));
}

function deleteQuote(apiPath, quoteId, callback, signal, param) {
  var requestInit = Curry._2(Fetch.RequestInit.make(/* Delete */4, {
              "Content-Type": "application/json"
            }, undefined, undefined, undefined, undefined)(undefined, undefined, undefined, undefined, undefined), Caml_option.some(signal), undefined);
  var promise = handleResponse(fetch(apiPath + ("/" + quoteId.toString()), requestInit));
  handleResult(callback, promise.catch(function (param) {
            return Promise.resolve({
                        TAG: /* Error */1,
                        _0: "unexpected promise fault"
                      });
          }));
}

function putQuote(apiPath, quote, callback, signal, param) {
  var requestInit = Curry._2(Fetch.RequestInit.make(/* Put */3, {
              "Content-Type": "application/json"
            }, Caml_option.some(JSON.stringify(QuoteModel.Encode.encode(quote))), undefined, undefined, undefined)(undefined, undefined, undefined, undefined, undefined), Caml_option.some(signal), undefined);
  var promise = handleResponse(fetch(apiPath + ("/" + quote.id.toString()), requestInit));
  handleResult(callback, promise.catch(function (param) {
            return Promise.resolve({
                        TAG: /* Error */1,
                        _0: "unexpected promise fault"
                      });
          }));
}

var contentType = [
  "Content-type",
  "application/json"
];

export {
  contentType ,
  handleResponse ,
  handleFault ,
  handleResult ,
  getQuotes ,
  postQuote ,
  deleteQuote ,
  putQuote ,
}
/* No side effect */
