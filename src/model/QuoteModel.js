// Generated by Melange

import * as Json_decode from "@glennsl/bs-json/./src/Json_decode.js";
import * as Json_encode from "@glennsl/bs-json/./src/Json_encode.js";
import * as Caml_js_exceptions from "melange/lib/es6/caml_js_exceptions.mjs";

function contributer(json) {
  return {
          id: Json_decode.field("id", Json_decode.$$int, json),
          name: Json_decode.field("name", Json_decode.string, json)
        };
}

function quote(json) {
  return {
          id: Json_decode.field("id", Json_decode.$$int, json),
          quote: Json_decode.field("quote", Json_decode.string, json),
          author: Json_decode.optional((function (param) {
                  return Json_decode.field("author", Json_decode.string, param);
                }), json),
          contributerId: Json_decode.field("contributerId", Json_decode.$$int, json)
        };
}

function expanded_quote(json) {
  return {
          id: Json_decode.field("id", Json_decode.$$int, json),
          quote: Json_decode.field("quote", Json_decode.string, json),
          author: Json_decode.optional((function (param) {
                  return Json_decode.field("author", Json_decode.string, param);
                }), json),
          contributer: Json_decode.field("contributer", contributer, json)
        };
}

function expanded_quotes(json) {
  return {
          items: Json_decode.array(expanded_quote, json)
        };
}

function decode_quote(json) {
  try {
    return {
            TAG: /* Ok */0,
            _0: quote(json)
          };
  }
  catch (raw_msg){
    var msg = Caml_js_exceptions.internalToOCamlException(raw_msg);
    if (msg.RE_EXN_ID === Json_decode.DecodeError) {
      return {
              TAG: /* Error */1,
              _0: msg._1
            };
    }
    throw msg;
  }
}

function decode_expanded_quote(json) {
  try {
    return {
            TAG: /* Ok */0,
            _0: expanded_quote(json)
          };
  }
  catch (raw_msg){
    var msg = Caml_js_exceptions.internalToOCamlException(raw_msg);
    if (msg.RE_EXN_ID === Json_decode.DecodeError) {
      return {
              TAG: /* Error */1,
              _0: msg._1
            };
    }
    throw msg;
  }
}

function decode_expanded_quotes(json) {
  try {
    return {
            TAG: /* Ok */0,
            _0: {
              items: Json_decode.array(expanded_quote, json)
            }
          };
  }
  catch (raw_msg){
    var msg = Caml_js_exceptions.internalToOCamlException(raw_msg);
    if (msg.RE_EXN_ID === Json_decode.DecodeError) {
      return {
              TAG: /* Error */1,
              _0: msg._1
            };
    }
    throw msg;
  }
}

var Decode = {
  contributer: contributer,
  quote: quote,
  expanded_quote: expanded_quote,
  expanded_quotes: expanded_quotes,
  decode_quote: decode_quote,
  decode_expanded_quote: decode_expanded_quote,
  decode_expanded_quotes: decode_expanded_quotes
};

function encode(q) {
  var a = q.author;
  return Json_encode.object_({
              hd: [
                "id",
                q.id
              ],
              tl: {
                hd: [
                  "quote",
                  q.quote
                ],
                tl: {
                  hd: [
                    "author",
                    a !== undefined ? a : null
                  ],
                  tl: {
                    hd: [
                      "contributerId",
                      q.contributerId
                    ],
                    tl: /* [] */0
                  }
                }
              }
            });
}

var Encode = {
  encode: encode
};

export {
  Decode ,
  Encode ,
}
/* No side effect */
