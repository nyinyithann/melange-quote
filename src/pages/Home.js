// Generated by Melange

import * as Data from "../service/Data.js";
import * as Curry from "melange/lib/es6/curry.mjs";
import * as React from "react";
import * as Js_int from "melange/lib/es6/js_int.mjs";
import * as Belt_Array from "melange/lib/es6/belt_Array.mjs";
import * as QuoteStore from "../store/QuoteStore.js";
import * as Belt_Option from "melange/lib/es6/belt_Option.mjs";

function Home$QuoteCard(Props) {
  var id = Props.id;
  var quote = Props.quote;
  var author = Props.author;
  var contributer = Props.contributer;
  var setEdit = Props.setEdit;
  var controller = new AbortController();
  var $$delete = function (param) {
    Data.deleteQuote(id, controller.signal);
  };
  return React.createElement("div", {
              className: "flex flex-col items-start rounded shadow shadow-slate-200 border-[1px] gap-2 dark:text-white dark:border-slate-500 dark:shadow-slate-900 max-w-[30vw]"
            }, React.createElement("p", {
                  className: "font-nav text-[1.2rem] p-2"
                }, quote), author !== undefined ? React.createElement("p", {
                    className: "font-brand p-2 pt-0"
                  }, "-- " + author) : null, React.createElement("div", {
                  className: "flex font-sans text-[0.8rem] rounded-b border-[1px] border-50 p-1 gap-2 w-full justify-end bg-300 divide-x divide-50"
                }, contributer !== undefined ? React.createElement("p", {
                        className: "w-full py-1 px-2 text-sm rounded-b-sm text-left"
                      }, "Posted by: " + contributer.name) : null, React.createElement("div", {
                      className: "flex items-center justify-center gap-1 text-900 underline px-1"
                    }, React.createElement("span", {
                          className: "cursor-pointer",
                          onClick: $$delete
                        }, "Delete"), React.createElement("span", {
                          className: "cursor-pointer",
                          onClick: (function (param) {
                              Curry._1(setEdit, id);
                            })
                        }, "Edit"))));
}

var QuoteCard = {
  make: Home$QuoteCard
};

function Home$QuoteForm(Props) {
  var quoteToEdit = Props.quoteToEdit;
  var match = React.useState(function () {
        return "";
      });
  var setQuoteText = match[1];
  var quoteText = match[0];
  var match$1 = React.useState(function () {
        return "";
      });
  var setAuthorText = match$1[1];
  var authorText = match$1[0];
  var idRef = React.useRef(Js_int.min);
  React.useEffect((function () {
          var match = quoteToEdit !== undefined ? [
              quoteToEdit.id,
              quoteToEdit.quote,
              quoteToEdit.author
            ] : [
              Js_int.min,
              "",
              undefined
            ];
          var author = match[2];
          var quote = match[1];
          Curry._1(setQuoteText, (function (param) {
                  return quote;
                }));
          Curry._1(setAuthorText, (function (param) {
                  return Belt_Option.getWithDefault(author, "");
                }));
          idRef.current = match[0];
        }), [quoteToEdit]);
  var controller = new AbortController();
  var handleUpdate = function (e) {
    e.preventDefault();
    if (!(quoteText !== "" && idRef.current !== Js_int.min)) {
      return ;
    }
    var quote_id = idRef.current;
    var quote_author = authorText === "" ? undefined : authorText;
    var quote = {
      id: quote_id,
      quote: quoteText,
      author: quote_author,
      contributerId: 1
    };
    Data.updateQuote(quote, controller.signal);
  };
  var handleAdd = function (e) {
    e.preventDefault();
    if (quoteText === "") {
      return ;
    }
    var quote_author = authorText === "" ? undefined : authorText;
    var quote = {
      id: 0,
      quote: quoteText,
      author: quote_author,
      contributerId: 1
    };
    Data.addQuote(quote, controller.signal);
  };
  return React.createElement("div", {
              className: "flex flex-col w-full itesm-center p-4 border-b-[2px] border-400 gap-2"
            }, React.createElement("div", {
                  className: "flex items-start gap-4"
                }, React.createElement("label", {
                      className: "bg-200 p-2 rounded-r-full w-[6rem]",
                      htmlFor: "quote-input"
                    }, "Quote"), React.createElement("textarea", {
                      className: "resize-none rounded w-full ring-0 outline-none active:ring-0 active:outline-none focus:ring-0 focus:outline-none border-transparent focus:border-transparent border-400 focus:border-400",
                      id: "quote-input",
                      maxLength: 1000,
                      required: true,
                      value: quoteText,
                      onChange: (function (e) {
                          var value = e.target.value;
                          Curry._1(setQuoteText, (function (param) {
                                  return value;
                                }));
                        })
                    })), React.createElement("div", {
                  className: "flex items-start gap-4"
                }, React.createElement("label", {
                      className: "bg-200 p-2 rounded-r-full w-[6rem]",
                      htmlFor: "author-input"
                    }, "Author"), React.createElement("input", {
                      className: "resize-none rounded w-full ring-0 outline-none active:ring-0 active:outline-none focus:ring-0 focus:outline-none border-transparent focus:border-transparent border-400 focus:border-400",
                      id: "author-input",
                      maxLength: 1000,
                      required: true,
                      type: "text",
                      value: authorText,
                      onChange: (function (e) {
                          var value = e.target.value;
                          Curry._1(setAuthorText, (function (param) {
                                  return value;
                                }));
                        })
                    })), quoteToEdit !== undefined ? React.createElement("button", {
                    className: "p-1 bg-400 text-800 w-[calc(100%-6.4rem)] rounded ml-auto",
                    type: "button",
                    onClick: handleUpdate
                  }, "Update") : React.createElement("button", {
                    className: "p-1 bg-400 text-800 w-[calc(100%-6.4rem)] rounded ml-auto",
                    type: "button",
                    onClick: handleAdd
                  }, "Add"));
}

var QuoteForm = {
  make: Home$QuoteForm
};

function Home(Props) {
  var match = Curry._2(QuoteStore.store.useStore, undefined, undefined);
  var quotes = match.quotes;
  var error = match.error;
  var match$1 = React.useState(function () {
        
      });
  var setQuoteToEdit = match$1[1];
  var controller = new AbortController();
  React.useEffect((function () {
          Data.getQuotes(controller.signal);
          return (function (param) {
                    controller.abort();
                  });
        }), []);
  var setEdit = function (id) {
    var quote = Belt_Array.getBy(quotes, (function (x) {
            return x.id === id;
          }));
    if (quote !== undefined) {
      return Curry._1(setQuoteToEdit, (function (param) {
                    return {
                            id: quote.id,
                            quote: quote.quote,
                            author: quote.author,
                            contributerId: quote.contributer.id
                          };
                  }));
    }
    
  };
  if (error.length > 0) {
    return React.createElement("div", {
                className: "pt-20"
              }, error);
  } else {
    return React.createElement("main", {
                className: "flex flex-col w-[100vw] h-full justify-start items-start p-10 pt-20 gap-4"
              }, React.createElement("div", {
                    className: "text-center w-full" + (
                      match.loading ? " visible" : " hidden"
                    )
                  }, "loading..."), React.createElement(Home$QuoteForm, {
                    quoteToEdit: match$1[0]
                  }), React.createElement("div", {
                    className: "flex flex-wrap w-full h-auto justify-start items-start gap-2"
                  }, Belt_Array.map(quotes, (function (param) {
                          var id = param.id;
                          return React.createElement(Home$QuoteCard, {
                                      id: id,
                                      quote: param.quote,
                                      author: param.author,
                                      contributer: param.contributer,
                                      setEdit: setEdit,
                                      key: id.toString()
                                    });
                        }))));
  }
}

var make = Home;

export {
  QuoteCard ,
  QuoteForm ,
  make ,
}
/* Data Not a pure module */
